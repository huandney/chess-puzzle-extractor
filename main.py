import argparse
from src import generator
import shutil
import subprocess
import os
from rich.console import Console
from rich.panel import Panel
from src import config

console = Console()

def ensure_stockfish_available():
    if shutil.which("stockfish") is None and not os.path.isfile("./stockfish"):
        console.print("[yellow]Stockfish n√£o encontrado. Baixando bin√°rio otimizado...[/yellow]")
        try:
            subprocess.run(["bash", "build_stockfish.sh"], check=True)
            console.print("[bold green]Stockfish instalado com sucesso![/bold green]")
        except subprocess.CalledProcessError as e:
            console.print(f"[red]Erro ao instalar Stockfish: {e}[/red]")
            exit(1)
    else:
        console.print("[bold green]Stockfish: Dispon√≠vel[/bold green]\n")

def main():
    parser = argparse.ArgumentParser(description="Extrair puzzles t√°ticos de partidas de xadrez em PGN")
    parser.add_argument("input", help="Arquivo PGN de entrada com partidas")
    parser.add_argument("--output", "-o", help=f"Arquivo de sa√≠da para puzzles (padr√£o: {config.DEFAULT_OUTPUT})", default=config.DEFAULT_OUTPUT)
    parser.add_argument("--depth", "-d", type=int, help=f"Profundidade da an√°lise do motor (padr√£o: {config.DEFAULT_DEPTH})", default=config.DEFAULT_DEPTH)
    parser.add_argument("--max-variants", "-m", type=int, help=f"M√°ximo de variantes alternativas na solu√ß√£o (padr√£o: {config.DEFAULT_MAX_VARIANTS})", default=config.DEFAULT_MAX_VARIANTS)
    parser.add_argument("--resume", "-r", action="store_true", help="Retomar do √∫ltimo progresso salvo (n√£o reanalisar jogos j√° processados)")
    parser.add_argument("--verbose", "-v", action="store_true", help="Mostrar sa√≠da verbosa (detalhes da an√°lise)")
    args = parser.parse_args()

    # Cabe√ßalho
    console.print("\n[bold blue]‚ôüÔ∏è  Chess Puzzles Extractor[/bold blue]", justify="center")

    ensure_stockfish_available()

    # Exibir configura√ß√µes de forma minimalista e elegante
    console.print("[bold cyan]‚öôÔ∏è  Configura√ß√µes:[/bold cyan]")
    console.print(f"üì• Entrada:         [cyan]{args.input}[/cyan]")
    console.print(f"üì§ Sa√≠da:           [cyan]{args.output}[/cyan]")
    console.print(f"üîç Profundidade:    [cyan]{args.depth}[/cyan]")
    console.print(f"üåø Variantes m√°x.:  [cyan]{args.max_variants}[/cyan]")
    console.print(f"üó£Ô∏è  Verbose:         [cyan]{'Sim' if args.verbose else 'N√£o'}[/cyan]")
    console.print(f"‚èØÔ∏è  Retomar:         [cyan]{'Sim' if args.resume else 'N√£o'}[/cyan]\n")

    try:
        total_games, puzzles_found, puzzles_rejected, reason_stats = generator.generate_puzzles(
            args.input, args.output, depth=args.depth, max_variants=args.max_variants,
            verbose=args.verbose, resume=args.resume
        )
        console.print(f"[bold green]Processo conclu√≠do com sucesso![/bold green]")
    except FileNotFoundError:
        console.print(f"[bold red]Erro: O arquivo {args.input} n√£o foi encontrado![/bold red]")
        exit(1)
    except Exception as e:
        console.print(f"[bold red]Erro durante a execu√ß√£o: {e}[/bold red]")
        exit(1)

if __name__ == "__main__":
    main()
